import sys

sys.path.insert(0, './protopy')
#import point_pb2 
#import edge_pb2
#import triangle_pb2
import mesh_pb2

#from protopy import point_pb2 
#from protopy import edge_pb2
#from protopy import triangle_pb2
#from protopy import mesh_pb2


def read_mesh(poly_file_name):

    mesh = mesh_pb2.Mesh()
    #points = {}
    #edges = []
    #triangles = {}


    #-----------------#
    # --- Vertices ---#
    #-----------------#

    # Open .node File
    mesh_node = open(poly_file_name + ".node", "r")

    # Read First Line
    # Which holds information on the file:
    # Vertices Number - Dimension - 0 - Flag
    firstLine = mesh_node.readline()
    #print(firstLine)

    # Lines Number
    line_num = 0

    # Read Points
    # Read Each Line and Break It Up Using The Following Template
    # point_number (iv) - x coordinate - y coordinate - border flag
    for line in mesh_node:
        line_num += 1
        #print("Line {}:".format(line_num) + line)
        tmp = []
        for t in line.split():
            try:
                tmp.append(float(t))
            except ValueError:
                pass
        #print(tmp)  # Print each parsed line
        if not tmp: # Empty list is false in Python 
            # line_num-1 because last line is only text information:
            # "Generated by ./triangle.bin -pqaI square.poly"           
            print("[*] Read {} Points".format(line_num-1))
        else: # List is not empty
            #print("[*] Creating point Object ...")
            point_id = int(tmp[0])
            mesh.points[point_id].p_num = point_id
            mesh.points[point_id].x = tmp[1]
            mesh.points[point_id].y = tmp[2]
            if tmp[3] == 1:
                mesh.points[point_id].border = True
            else:
                mesh.points[point_id].border = False

    # Close .node File
    mesh_node.close()


    #-----------------#
    # --- Elements ---#
    #-----------------#

    # Open .node File
    mesh_ele = open(poly_file_name + ".ele", "r")

    # Read First Line
    # Which holds information on the file:
    # Triangles Number - Dimension - 0 - Flag
    firstLine = mesh_ele.readline()
    #print(firstLine)

    # Lines Number
    line_num = 0

    # Read Elements (Triangles)
    # Read Each Line and Break It Up Using The Following Template
    # triangle id - first point id - second point id - third point id
    for line in mesh_ele:
        line_num += 1
        #print("Line {}:".format(line_num) + line)
        tmp = []
        for t in line.split():
            try:
                tmp.append(int(t))
            except ValueError:
                pass
        #print(tmp) # Print each parsed line
        if not tmp: # Empty list is false in Python      
            # line_num-1 because last line is only text information:
            # "Generated by ./triangle.bin -pqaI square.poly"
            print("[*] Read {} Triangles".format(line_num-1))
        else: # List is not empty
            tr_id = int(tmp[0])
            A = int(tmp[1])
            B = int(tmp[2])
            C = int(tmp[3])
            mesh.triangles[tr_id].t_num = tr_id
            mesh.triangles[tr_id].pointA = A
            mesh.triangles[tr_id].pointB = B
            mesh.triangles[tr_id].pointC = C

    # Close .ele File
    mesh_ele.close()
    

    # Return the Mesh
    return mesh


def print_points(mesh):
    for p in mesh.points:
        print("Point {}: {} - {} - {}".format(mesh.points[p].p_num, mesh.points[p].x, mesh.points[p].y, mesh.points[p].border))


def print_triangles(mesh):
    for t in mesh.triangles:
        print("Triangle {}: {} - {} - {}".format(mesh.triangles[t].t_num, mesh.triangles[t].pointA, mesh.triangles[t].pointB, mesh.triangles[t].pointC))



name = "square"
m = read_mesh(name)
#print_points(m)
#print_triangles(m)






